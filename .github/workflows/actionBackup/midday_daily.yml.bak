name: 'midday-daily'

on:
  workflow_dispatch:
    inputs:
        logLevel:
          description: 'Log level'     
          required: true
          default: 'warning'
        tags:
          description: 'action'  
  schedule:
    - cron:  '00 04 * * *'

jobs:
  playwright:
    runs-on: ubuntu-latest
    env:
      IF_AWS       : True
      IF_PLAYWRIGHT: True
    strategy:
      matrix:
       include:
         - script: script/github_playwright.py
         - script: script/covid19CN_playwright.py
    steps:
      - name: Checkout codes
        uses: actions/checkout@v1

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: set cn-lang
        run: |
            sudo apt-get install fonts-wqy-zenhei
        continue-on-error: true

      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            pip install pipreqs
            pipreqs .
            pip install -r requirements.txt

      - name: Install Playwright
        if: ${{ env.IF_PLAYWRIGHT == 'True'}}
        run: |
            python -m playwright install

      - name: run python downloader
        run: |
            export command="python $MATRIX_SCRIPT 2>/dev/null"
            timeout 5m bash -c '$command || $command'  #retry command twice 
        env:
            MATRIX_SCRIPT: ${{matrix.script}}

      - name: aws setup
        if: ${{ env.IF_AWS == 'True'}}
        run: |
            python -m pip install awscli
            mkdir ~/.aws
            echo "[default]" >> ~/.aws/credentials
            echo "[default]" >> ~/.aws/config
            echo "aws_access_key_id    = ${{ secrets.AWS_ACCESS_KEY_ID     }}" >> ~/.aws/credentials
            echo "aws_secret_access_key= ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
            echo "region               = ap-east-1"                            >> ~/.aws/config

      - name: aws md5 check
        if: ${{ env.IF_AWS == 'True'}}
        run: |
            export action_bucket=s3://`echo ${GITHUB_REPOSITORY_OWNER}action | tr "[A-Z]" "[a-z]"`
            export command="python aws/md5_aws.py --files_path=screenshot 2>/dev/null"
            files_num=`timeout 5m bash -c '$command || $command || echo 0'` #retry command twice 
            echo $files_num
            echo '::set-output name=FILE_NUM::'$files_num
        id: aws-md5

      - name: send skype
        uses: Eloco/docker-action-send-skype@v2
        if  : steps.aws-md5.outputs.FILE_NUM != '0' || steps.aws-md5.conclusion == 'skipped' || env.IF_AWS == 'False'
        with:
            skype_username : ${{ secrets.SKYPE_USERNAME }}
            skype_password : ${{ secrets.SKYPE_PASSWORD }}
            skype_ids      : 19:d32d3d93d57740308986b42ec36e5525@thread.skype
            send_msg_path  : message.txt 
            send_file_path : screenshot

  non-playwright:
    runs-on: ubuntu-latest
    strategy:
      matrix:
       include:
         - script: https://raw.githubusercontent.com/Eloco/Script-collect/main/misc/douban_movie.py
           skype_id: 19:c941776d71c7417abf8fdb06b4160e05@thread.skype
           skype_username : SKYPE_MINE_USERNAME
           skype_password : SKYPE_MINE_PASSWORD
           FILE_BASE: message
           IF_AWS       : True
           IF_PLAYWRIGHT: False
    steps:
      - name: Checkout codes
        uses: actions/checkout@v1

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
            curl $MATRIX_SCRIPT -o main_script.py
            python -m pip install --upgrade pip
            pip install pipreqs
            pipreqs .
            pip install -r requirements.txt
        env:
            MATRIX_SCRIPT: ${{matrix.script}}

      - name: Install Playwright
        if: ${{ env.IF_PLAYWRIGHT  == 'True'}}
        run: |
            python -m playwright install
        env:
            IF_PLAYWRIGHT: ${{ matrix.IF_PLAYWRIGHT }}

      - name: run python
        run: |
            python main_script.py


      - name: aws setup
        if: ${{ env.IF_AWS == 'True'}}
        run: |
            python -m pip install awscli
            mkdir ~/.aws
            echo "[default]" >> ~/.aws/credentials
            echo "[default]" >> ~/.aws/config
            echo "aws_access_key_id    = ${{ secrets.AWS_ACCESS_KEY_ID     }}" >> ~/.aws/credentials
            echo "aws_secret_access_key= ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
            echo "region               = ap-east-1"                            >> ~/.aws/config
        env:
            IF_AWS: ${{ matrix.IF_AWS }}

      - name: aws md5 check
        if: ${{ env.IF_AWS == 'True'}}
        run: |
            export action_bucket=s3://`echo ${GITHUB_REPOSITORY_OWNER}action | tr "[A-Z]" "[a-z]"`
            export command="python aws/md5_aws.py --files_path=${{ matrix.FILE_BASE }} 2>/dev/null"
            files_num=`timeout 5m bash -c '$command || $command || echo 0'` #retry command twice 
            echo $files_num
            echo '::set-output name=FILE_NUM::'$files_num
        id: aws-md5
        env:
            IF_AWS: ${{ matrix.IF_AWS }}

      - name: send skype
        uses: Eloco/docker-action-send-skype@v2
        if  : env.IF_AWS == 'False' || steps.aws-md5.conclusion == 'skipped' || steps.aws-md5.outputs.FILE_NUM != '0'  
        with:
            skype_username : ${{ secrets[matrix.skype_username] }}
            skype_password : ${{ secrets[matrix.skype_password] }}
            skype_ids      : ${{ matrix.skype_id  }} 
            send_msg_path  : ${{ matrix.FILE_BASE }}
            send_file_path : none
        env:
            IF_AWS: ${{ matrix.IF_AWS }}
