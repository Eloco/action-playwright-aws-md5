name: 'misc_md5'

on:
  workflow_dispatch:
    inputs:
        logLevel:
          description: 'Log level'     
          required: true
          default: 'warning'
        tags:
          description: 'action'  
  schedule:
    - cron:  '*/8 * * * *'

jobs:
  shell:
    runs-on: ubuntu-latest
    strategy:
      matrix:
       include:
         - script: https://raw.githubusercontent.com/Eloco/Script-collect/main/misc/weather.sh
           skype_id: 19:d32d3d93d57740308986b42ec36e5525@thread.skype
           skype_username : SKYPE_USERNAME
           skype_password : SKYPE_PASSWORD
           FILE_BASE: msg.txt
           IF_AWS       : True
           IF_PLAYWRIGHT: False
    steps:
      - id: random-msg-path-generator
        run: echo "::set-output name=random::$(echo ${{ matrix.FILE_BASE }}/${RANDOM}.txt)"
        shell: bash

      - name: Checkout codes
        uses: actions/checkout@v1

      - name: run bash script
        run: |
            curl $MATRIX_SCRIPT -o misc_script
            chmod +x misc_script
            mkdir ${{ matrix.FILE_BASE }}
            export command="bash misc_script"
            timeout 5m bash -c '$command || $command'  #retry command twice 
            sed -i '1i [GITHUB ACTION] <misc-aws-md5>' $FILE_PATH
            cat $FILE_PATH
        env:
            MATRIX_SCRIPT: ${{matrix.script}}
            FILE_PATH:     ${{steps.random-msg-path-generator.outputs.random}}

      - name: aws setup
        if: ${{ env.IF_AWS == 'True'}}
        run: |
            python -m pip install awscli fire
            mkdir ~/.aws
            echo "[default]" >> ~/.aws/credentials
            echo "[default]" >> ~/.aws/config
            echo "aws_access_key_id    = ${{ secrets.AWS_ACCESS_KEY_ID     }}" >> ~/.aws/credentials
            echo "aws_secret_access_key= ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
            echo "region               = ap-east-1"                            >> ~/.aws/config
        env:
            IF_AWS: ${{ matrix.IF_AWS }}

      - name: aws md5 check
        if: ${{ env.IF_AWS == 'True'}}
        run: |
            export action_bucket=s3://`echo ${GITHUB_REPOSITORY_OWNER}action | tr "[A-Z]" "[a-z]"`
            export command="python aws/md5_aws.py --files_path=${{ matrix.FILE_BASE }} 2>/dev/null"
            files_num=`timeout 5m bash -c '$command || $command || echo 0'` #retry command twice 
            echo $files_num
            echo '::set-output name=FILE_NUM::'$files_num
        id: aws-md5
        env:
            IF_AWS: ${{ matrix.IF_AWS }}

      - name: send skype
        uses: Eloco/docker-action-send-skype@v2
        if  : env.IF_AWS == 'False' || steps.aws-md5.conclusion == 'skipped' || steps.aws-md5.outputs.FILE_NUM != '0'  
        with:
            skype_username : ${{ secrets[matrix.skype_username] }}
            skype_password : ${{ secrets[matrix.skype_password] }}
            skype_ids      : ${{ matrix.skype_id  }} 
            send_msg_path  : ${{ matrix.FILE_BASE }}
            send_file_path : none
        env:
            IF_AWS: ${{ matrix.IF_AWS }}


            #python:
            #  runs-on: ubuntu-latest
            #  strategy:
            #    matrix:
            #     include:
            #       - script: https://raw.githubusercontent.com/Eloco/Script-collect/main/misc/douban_movie.py
            #         skype_id: 19:c941776d71c7417abf8fdb06b4160e05@thread.skype
            #         skype_username : SKYPE_MINE_USERNAME
            #         skype_password : SKYPE_MINE_PASSWORD
            #         FILE_BASE: message
            #         IF_AWS       : True
            #         IF_PLAYWRIGHT: False
            #  steps:
            #    - name: Checkout codes
            #      uses: actions/checkout@v1

            #    - name: Set up Python
            #      uses: actions/setup-python@v2
            #      with:
            #        python-version: 3.9

            #    - name: Install dependencies
            #      run: |
            #          curl $MATRIX_SCRIPT -o main_script.py
            #          python -m pip install --upgrade pip
            #          pip install pipreqs
            #          pipreqs .
            #          pip install -r requirements.txt
            #      env:
            #          MATRIX_SCRIPT: ${{matrix.script}}

            #    - name: Install Playwright
            #      if: ${{ env.IF_PLAYWRIGHT  == 'True'}}
            #      run: |
            #          python -m playwright install
            #      env:
            #          IF_PLAYWRIGHT: ${{ matrix.IF_PLAYWRIGHT }}

            #    - name: run python
            #      run: |
            #          python main_script.py


            #    - name: aws setup
            #      if: ${{ env.IF_AWS == 'True'}}
            #      run: |
            #          python -m pip install awscli
            #          mkdir ~/.aws
            #          echo "[default]" >> ~/.aws/credentials
            #          echo "[default]" >> ~/.aws/config
            #          echo "aws_access_key_id    = ${{ secrets.AWS_ACCESS_KEY_ID     }}" >> ~/.aws/credentials
            #          echo "aws_secret_access_key= ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
            #          echo "region               = ap-east-1"                            >> ~/.aws/config
            #      env:
            #          IF_AWS: ${{ matrix.IF_AWS }}

            #    - name: aws md5 check
            #      if: ${{ env.IF_AWS == 'True'}}
            #      run: |
            #          export action_bucket=s3://`echo ${GITHUB_REPOSITORY_OWNER}action | tr "[A-Z]" "[a-z]"`
            #          export command="python aws/md5_aws.py --files_path=${{ matrix.FILE_BASE }} 2>/dev/null"
            #          files_num=`timeout 5m bash -c '$command || $command || echo 0'` #retry command twice 
            #          echo $files_num
            #          echo '::set-output name=FILE_NUM::'$files_num
            #      id: aws-md5
            #      env:
            #          IF_AWS: ${{ matrix.IF_AWS }}

            #    - name: send skype
            #      uses: Eloco/docker-action-send-skype@v2
            #      if  : env.IF_AWS == 'False' || steps.aws-md5.conclusion == 'skipped' || steps.aws-md5.outputs.FILE_NUM != '0'  
            #      with:
            #          skype_username : ${{ secrets[matrix.skype_username] }}
            #          skype_password : ${{ secrets[matrix.skype_password] }}
            #          skype_ids      : ${{ matrix.skype_id  }} 
            #          send_msg_path  : ${{ matrix.FILE_BASE }}
            #          send_file_path : none
            #      env:
            #          IF_AWS: ${{ matrix.IF_AWS }}
